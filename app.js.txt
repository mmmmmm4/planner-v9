// planner v9 — condensed but complete core
const STORAGE='planner_v9_state_v1';
let state = JSON.parse(localStorage.getItem(STORAGE)) || {tasks:[],events:[],goals:[],xp:0,level:1,titles:[],intensity:'normal',introSeen:false,setup:{}};

function uid(){return Date.now().toString(36)+Math.random().toString(36).slice(2,5);}
function todayISO(){return new Date().toISOString().slice(0,10);}
function formatISO(d){return new Date(d.getFullYear(),d.getMonth(),d.getDate()).toISOString().slice(0,10);}
function intensityLimit(v){if(v==='low')return 3;if(v==='high')return 8;return 5;}

const dbg = { el:null, logEl:null, init(){ this.el = document.getElementById('debug-overlay'); this.logEl = document.getElementById('debug-log'); if(!this.el) return; document.getElementById('debug-toggle').addEventListener('click', ()=>this.el.classList.toggle('debug-hidden')); document.getElementById('sw-unreg').addEventListener('click', ()=>navigator.serviceWorker.getRegistrations().then(r=>r.forEach(x=>x.unregister()))); document.getElementById('clear-cache').addEventListener('click', ()=>caches.keys().then(k=>k.forEach(n=>caches.delete(n)))); this.log('init'); }, log(m){ if(!this.logEl) return; this.logEl.textContent = new Date().toLocaleTimeString() + ' — ' + m + '\n' + this.logEl.textContent; } };

window.addEventListener('error', e => { try{ dbg.log('ERROR: '+(e && e.message ? e.message : e)); }catch{} });

document.addEventListener('DOMContentLoaded', ()=>{ dbg.init(); bind(); registerSW(); if(!state.introSeen) showIntro(); else { viewMode='week'; renderAll(); } setupTouchZoom(); dbg.log('ready'); });

function registerSW(){ if('serviceWorker' in navigator){ navigator.serviceWorker.register('service-worker.js').then(()=>dbg.log('sw registered')).catch(e=>dbg.log('sw failed: '+e.message)); } }

// Intro / mini-setup
function showIntro(){
  const intro = document.getElementById('intro');
  intro.innerHTML = `<div class="intro-card"><h2>Willkommen</h2><p>Kurz einrichten: Ziele, Intensität, Motivation.</p>
  <div><input id="g1" placeholder="Hauptziel 1"><input id="g2" placeholder="Hauptziel 2"><input id="g3" placeholder="Hauptziel 3"></div>
  <div style="margin-top:10px">Intensität: <select id="intro-int"><option value="low">Leicht</option><option value="normal" selected>Normal</option><option value="high">Intensiv</option></select></div>
  <div style="margin-top:10px">Motivation: <select id="intro-mot"><option value="gentle">Sanft</option><option value="push" selected>Push</option></select></div>
  <div style="margin-top:12px"><button id="intro-save">Los geht's</button></div></div>`;
  intro.classList.remove('intro-hidden');
  document.getElementById('intro-save').addEventListener('click', ()=>{
    state.setup.goals = [document.getElementById('g1').value, document.getElementById('g2').value, document.getElementById('g3').value].filter(x=>x);
    state.intensity = document.getElementById('intro-int').value;
    state.setup.mot = document.getElementById('intro-mot').value;
    state.introSeen = true;
    state.setup.goals.forEach(g=>{ if(g) addGoal({text:g,deadline:null,hoursPerWeek:1,theme:'general'}); });
    intro.classList.add('intro-hidden');
    viewMode='week'; save(); showToast('Setup gespeichert');
  });
}

// bindings
function bind(){
  document.querySelectorAll('.tabs button').forEach(b=>b.addEventListener('click', ()=>{ document.querySelectorAll('.tabs button').forEach(x=>x.classList.remove('active')); b.classList.add('active'); showTab(b.dataset.tab); }));
  document.querySelectorAll('.controls button[data-mode]').forEach(b=>b.addEventListener('click', ()=>{ document.querySelectorAll('.controls button[data-mode]').forEach(x=>x.classList.remove('active')); b.classList.add('active'); viewMode=b.dataset.mode; renderAll(); }));
  document.getElementById('quick-add').addEventListener('click', quickAdd);
  document.getElementById('add-task') && document.getElementById('add-task').addEventListener('click', ()=>{ const t=document.getElementById('task-text'); if(t && t.value.trim()) addTask({text:t.value,date:document.getElementById('task-date').value||null,time:document.getElementById('task-time')?document.getElementById('task-time').value:null,duration:parseInt(document.getElementById('task-dur').value)||30,prio:document.getElementById('task-prio').value||'medium'}); if(t) t.value=''; });
  document.getElementById('add-goal') && document.getElementById('add-goal').addEventListener('click', ()=>{ const g=document.getElementById('goal-text'); if(g && g.value.trim()) addGoal({text:g.value,deadline:document.getElementById('goal-deadline').value||null,hoursPerWeek:parseFloat(document.getElementById('goal-hours').value)||1,theme:document.getElementById('goal-theme').value||'general'}); if(g) g.value=''; });
  document.getElementById('intensity') && document.getElementById('intensity').addEventListener('change', e=>{ state.intensity = e.target.value; save(); });
  document.getElementById('today') && document.getElementById('today').addEventListener('click', ()=>{ viewMode='week'; renderAll(); });
}

// storage & quick add
function save(){ localStorage.setItem(STORAGE, JSON.stringify(state)); dbg.log('saved'); renderAll(); }
function quickAdd(){ const text=document.getElementById('quick-input').value.trim(); if(!text) return; const type=document.getElementById('quick-type').value; const date=document.getElementById('quick-date').value||null; const time=document.getElementById('quick-time').value||null; const dur=parseInt(document.getElementById('quick-dur').value)||30; const prio=document.getElementById('quick-prio').value||'medium'; if(type==='task') addTask({text,date,time,duration:dur,prio}); else if(type==='event'){ if(!date){ alert('Datum wählen'); return; } addEvent({title:text,date,time,duration:dur,repeat:'none'}); } else if(type==='goal'){ addGoal({text,deadline:date,hoursPerWeek:1,theme:'general'}); } document.getElementById('quick-input').value=''; showToast('Hinzugefügt'); save(); }

// core: tasks/events/goals
function addTask(t){ const task=Object.assign({id:uid(),done:false,autoAssigned:false,goalId:null}, t); if(!task.date){ const limit=intensityLimit(state.intensity); let day=new Date(); for(let i=0;i<90;i++){ const key=formatISO(day); const ev=state.events.some(e=> isEventOnDate(e,key)); const tasksCount=state.tasks.filter(x=>x.date===key).length; if(!ev && tasksCount<limit){ task.date=key; task.autoAssigned=true; break; } day.setDate(day.getDate()+1); } if(!task.date) task.date=formatISO(new Date()); } if(!task.time){ task.time = findFreeTimeSlot(task.date, task.duration || 30); } state.tasks.push(task); dbg.log('task added:'+task.text+' @'+task.date+' '+task.time); save(); }

function findFreeTimeSlot(date, duration){ const start=6, end=23, step=30; function toMin(hm){ const p=hm.split(':'); return parseInt(p[0])*60+parseInt(p[1]); } function toHM(m){ const h=Math.floor(m/60); const mm=m%60; return String(h).padStart(2,'0')+':'+String(mm).padStart(2,'0'); } const existing=state.tasks.filter(t=>t.date===date).map(t=>({time:t.time||'09:00',dur:t.duration||30})); for(let m=start*60; m+duration<=end*60; m+=step){ let ok=true; for(const e of existing){ const s=toMin(e.time); const eend=s+(e.dur||30); if(!(m+duration <= s || m >= eend)){ ok=false; break; } } if(ok) return toHM(m); } return '09:00'; }

function addEvent(e){ const ev=Object.assign({id:uid(),repeat:e.repeat||'none'}, e); state.events.push(ev); dbg.log('event:'+ev.title); rebalanceAuto(); save(); }

function addGoal(g){ const goal=Object.assign({id:uid(),text:g.text,deadline:g.deadline,hoursPerWeek:g.hoursPerWeek||1,theme:g.theme||'general',subgoals:[]}, g); if(goal.deadline){ const now=new Date(); const end=new Date(goal.deadline); const days=Math.max(1, Math.round((end-now)/(24*3600*1000))); const weeks=Math.max(1, Math.ceil(days/7)); for(let i=0;i<weeks;i++){ const subDate=new Date(); subDate.setDate(subDate.getDate()+i*7); const title='Teil '+(i+1)+' — '+goal.text; const sub={id:uid(),text:title,date:formatISO(subDate),duration:Math.round(goal.hoursPerWeek*60),done:false}; goal.subgoals.push(sub); state.tasks.push({id:uid(),text:'[Teilziel] '+title,date:sub.date,time:findFreeTimeSlot(sub.date, sub.duration),duration:sub.duration,prio:'medium',done:false,autoAssigned:false,goalId:goal.id}); } } state.goals.push(goal); dbg.log('goal:'+goal.text); save(); }

function isEventOnDate(ev,iso){ if(ev.date===iso) return true; if(!ev.repeat||ev.repeat==='none') return false; const d=new Date(iso); const start=new Date(ev.date); if(ev.repeat==='daily') return d>=start; if(ev.repeat==='weekly'){ const diff=Math.floor((d-start)/(24*3600*1000)); return diff>=0 && diff%7===0; } if(ev.repeat==='monthly') return d.getDate()===start.getDate() && d>=start; if(ev.repeat==='yearly') return d.getDate()===start.getDate() && d.getMonth()===start.getMonth() && d>=start; return false; }

function rebalanceAuto(){ const limit=intensityLimit(state.intensity); state.tasks.filter(t=>t.autoAssigned && !t.done).forEach(t=>{ let day=new Date(); for(let i=0;i<120;i++){ const key=formatISO(day); const ev=state.events.some(e=> isEventOnDate(e,key)); const tc=state.tasks.filter(x=>x.date===key && x.id!==t.id).length; if(!ev && tc<limit){ t.date=key; t.time = findFreeTimeSlot(key, t.duration||30); break; } day.setDate(day.getDate()+1); } }); dbg.log('rebalance'); save(); }

function toggleDone(id){ const t=state.tasks.find(x=>x.id===id); if(!t) return; t.done=!t.done; if(t.done){ const xp=t.prio==='high'?10:t.prio==='medium'?5:2; state.xp+=xp; showToast('Gut gemacht!'); while(state.xp>=state.level*50){ state.xp -= state.level*50; state.level++; if(state.level===5) state.titles.push('Produktivitäts-Meister'); } } dbg.log('toggle:'+id); save(); }

function removeTask(id){ state.tasks=state.tasks.filter(x=>x.id!==id); dbg.log('remove:'+id); save(); }
function removeEvent(id){ state.events=state.events.filter(x=>x.id!==id); dbg.log('remove event:'+id); rebalanceAuto(); save(); }

// renderers
let viewMode='week';
function renderAll(){ try{ renderCalendar(); renderTasks(); renderGoals(); renderOverview(); document.getElementById('level').textContent=state.level; document.getElementById('xp').textContent=state.xp; }catch(e){ dbg.log('renderAll error:'+e.message); } }

function renderCalendar(){ document.getElementById('date-line').textContent = new Date().toLocaleDateString('de-DE',{weekday:'long',day:'2-digit',month:'long',year:'numeric'}); const area=document.getElementById('calendar-area'); area.innerHTML=''; if(viewMode==='day') renderDayView(); else if(viewMode==='week') renderWeek(); else if(viewMode==='month') renderMonth(); else renderYear(); renderSide(todayISO()); }

function renderWeek(){ const start=new Date(); const day=(start.getDay()+6)%7; start.setDate(start.getDate()-day); const grid=document.createElement('div'); grid.className='calendar-grid'; for(let i=0;i<7;i++){ const d=new Date(start); d.setDate(start.getDate()+i); const key=formatISO(d); const cell=document.createElement('div'); cell.className='calendar-cell'; cell.dataset.date=key; cell.addEventListener('dragover',e=>{ e.preventDefault(); cell.classList.add('drag-over'); }); cell.addEventListener('dragleave', e=>cell.classList.remove('drag-over')); cell.addEventListener('drop', e=>{ e.preventDefault(); const id = e.dataTransfer.getData('text/plain'); const t = state.tasks.find(x=>x.id===id); if(t){ t.date = key; t.time = findFreeTimeSlot(key, t.duration||30); showToast('Verschoben'); save(); } cell.classList.remove('drag-over'); }); if(key===todayISO()) cell.classList.add('cell-today'); const hd=document.createElement('div'); hd.className='date-num'; hd.textContent=d.toLocaleDateString('de-DE',{weekday:'short',day:'2-digit'}); cell.appendChild(hd); state.events.filter(ev=> isEventOnDate(ev,key)).forEach(ev=>{ const evEl=document.createElement('div'); evEl.className='pill'; evEl.textContent=(ev.time?ev.time+' ':'')+ev.title+(ev.repeat&&ev.repeat!=='none'?' ♻️':''); cell.appendChild(evEl); }); state.tasks.filter(t=> t.date===key).sort((a,b)=> (a.time||'00:00').localeCompare(b.time||'00:00')).slice(0,8).forEach(t=>{ const p=document.createElement('div'); p.className='pill'; p.draggable=true; p.dataset.id=t.id; p.addEventListener('dragstart', e=>e.dataTransfer.setData('text/plain', t.id)); p.textContent=(t.time? t.time+' ':'') + (t.done? '✓ ':'') + t.text; cell.appendChild(p); }); grid.appendChild(cell); } document.getElementById('calendar-area').appendChild(grid); }

function renderDayView(dayIso){ const dateIso = dayIso || todayISO(); const wrapper=document.createElement('div'); wrapper.className='day-grid'; const timesCol=document.createElement('div'); timesCol.className='time-column'; const slotsCol=document.createElement('div'); slotsCol.className='slots-column'; for(let h=6; h<23; h++){ for(let m=0;m<60;m+=30){ const label = String(h).padStart(2,'0')+':'+String(m).padStart(2,'0'); const slot=document.createElement('div'); slot.className='slot'; slot.dataset.time=label; slot.addEventListener('dragover', e=>{ e.preventDefault(); slot.classList.add('drag-over'); }); slot.addEventListener('dragleave', e=>{ slot.classList.remove('drag-over'); }); slot.addEventListener('drop', e=>{ e.preventDefault(); const id=e.dataTransfer.getData('text/plain'); const t=state.tasks.find(x=>x.id===id); if(t){ t.date = dateIso; t.time = label; showToast('Zeit geändert'); save(); } slot.classList.remove('drag-over'); }); slotsCol.appendChild(slot); const lbl=document.createElement('div'); lbl.textContent=label; lbl.style.height='28px'; timesCol.appendChild(lbl); } } state.tasks.filter(t=>t.date===dateIso).forEach(t=>{ const startParts = (t.time||'09:00').split(':'); const startMin = parseInt(startParts[0])*60 + parseInt(startParts[1]); const topMin = startMin - 6*60; const pxPerMin = 28/30; const height = Math.max(24, (t.duration||30)*pxPerMin); const block = document.createElement('div'); block.className='task-block'; block.style.top = (topMin*pxPerMin)+'px'; block.style.left = '8px'; block.style.right = '8px'; block.style.height = height+'px'; block.dataset.id = t.id; block.draggable=true; block.addEventListener('dragstart', e=>e.dataTransfer.setData('text/plain', t.id)); block.textContent = (t.time? t.time+' ':'') + t.text; slotsCol.appendChild(block); }); wrapper.appendChild(timesCol); wrapper.appendChild(slotsCol); const area=document.getElementById('calendar-area'); area.appendChild(wrapper); }

function renderMonth(){ const now=new Date(); const year=now.getFullYear(); const month=now.getMonth(); const first=new Date(year,month,1); const start=(first.getDay()+6)%7; const days=new Date(year,month+1,0).getDate(); const grid=document.createElement('div'); grid.className='calendar-grid'; for(let i=0;i<start;i++){ const e=document.createElement('div'); e.className='calendar-cell'; grid.appendChild(e); } for(let d=1; d<=days; d++){ const dt=new Date(year,month,d); const key=formatISO(dt); const cell=document.createElement('div'); cell.className='calendar-cell'; if(key===todayISO()) cell.classList.add('cell-today'); const h=document.createElement('div'); h.className='date-num'; h.textContent=d; cell.appendChild(h); state.tasks.filter(t=>t.date===key).slice(0,3).forEach(t=>{ const p=document.createElement('div'); p.className='pill'; p.textContent=(t.done?'✓ ':'')+t.text; cell.appendChild(p); }); grid.appendChild(cell); } document.getElementById('calendar-area').appendChild(grid); }

function renderYear(){ const now=new Date(); const wrap=document.createElement('div'); wrap.style.display='grid'; wrap.style.gridTemplateColumns='repeat(4,1fr)'; wrap.style.gap='8px'; for(let m=0;m<12;m++){ const box=document.createElement('div'); box.className='calendar-cell'; const h=document.createElement('div'); h.className='date-num'; h.textContent=new Date(now.getFullYear(),m,1).toLocaleString('de-DE',{month:'short'}); box.appendChild(h); const count=state.tasks.filter(t=> new Date(t.date).getMonth()===m ).length; const p=document.createElement('div'); p.textContent=count+' Aufgaben'; box.appendChild(p); wrap.appendChild(box); } document.getElementById('calendar-area').appendChild(wrap); }

function renderSide(iso){ const side=document.getElementById('side-list'); side.innerHTML=''; document.getElementById('side-date').textContent=new Date(iso).toLocaleDateString('de-DE',{weekday:'long',day:'2-digit',month:'long'}); state.events.filter(ev=> isEventOnDate(ev,iso)).forEach(ev=>{ const li=document.createElement('li'); li.textContent=(ev.time?ev.time+' ':'')+ev.title+(ev.repeat&&ev.repeat!=='none'?' ♻️':''); side.appendChild(li); }); state.tasks.filter(t=>t.date===iso).sort((a,b)=> (a.time||'00:00').localeCompare(b.time||'00:00')).forEach(t=>{ const li=document.createElement('li'); li.textContent=(t.time? t.time+' ':'') + (t.done?'✓ ':'') + t.text + ' ['+t.prio+']'; const btn=document.createElement('button'); btn.textContent=t.done?'✔':'○'; btn.addEventListener('click', ()=>{ toggleDone(t.id); }); li.appendChild(btn); side.appendChild(li); }); }

function renderTasks(){ const el=document.getElementById('task-list'); if(!el) return; el.innerHTML=''; state.tasks.forEach(t=>{ const li=document.createElement('li'); li.textContent=(t.date? t.date+' ':'') + (t.time? t.time+' ':'') + (t.done?'✓ ':'') + t.text; const btn=document.createElement('button'); btn.textContent=t.done?'✔':'○'; btn.addEventListener('click', ()=>toggleDone(t.id)); const del=document.createElement('button'); del.textContent='❌'; del.addEventListener('click', ()=>removeTask(t.id)); li.appendChild(btn); li.appendChild(del); el.appendChild(li); }); }

function renderGoals(){ const el=document.getElementById('goals-list'); if(!el) return; el.innerHTML=''; state.goals.forEach(g=>{ const box=document.createElement('div'); box.innerHTML='<strong>'+g.text+'</strong><div>Deadline: '+(g.deadline||'—')+' • '+(g.hoursPerWeek||'')+' Std/Woche</div>'; const ul=document.createElement('ul'); g.subgoals.forEach(s=>{ const li=document.createElement('li'); li.textContent=(s.done?'✓ ':'')+s.text+' ('+s.date+')'; ul.appendChild(li); }); box.appendChild(ul); el.appendChild(box); }); }

function renderOverview(){ const bars=document.getElementById('bars'); if(!bars) return; bars.innerHTML=''; for(let i=6;i>=0;i--){ const d=new Date(); d.setDate(d.getDate()-i); const key=formatISO(d); const tasks=state.tasks.filter(t=>t.date===key); const done=tasks.filter(t=>t.done).length; const total=Math.max(1,tasks.length); const pct=Math.round((done/total)*100); const bar=document.createElement('div'); bar.className='bar'; bar.style.height=Math.max(10,(pct/100)*120)+'px'; bar.textContent=pct+'%'; bars.appendChild(bar); } const pie=document.getElementById('pie'); if(!pie) return; pie.innerHTML=''; const today=todayISO(); const tasks=state.tasks.filter(t=>t.date===today); const totalMin=tasks.reduce((s,t)=>s+(t.duration||30),0)||1; pie.textContent=Math.round(totalMin/60)+'h today'; }

function showToast(txt,ms=1200){ const t=document.getElementById('toast'); t.textContent=txt; t.classList.remove('hidden'); setTimeout(()=>t.classList.add('hidden'),ms); dbg.log('toast:'+txt); }

// touch/pinch zoom
function setupTouchZoom(){ const area=document.getElementById('calendar-area'); if(!area) return; let startDist=null, scale=1; area.addEventListener('touchstart', (e)=>{ if(e.touches && e.touches.length===2) startDist = Math.hypot(e.touches[0].clientX-e.touches[1].clientX, e.touches[0].clientY-e.touches[1].clientY); }, {passive:true}); area.addEventListener('touchmove', (e)=>{ if(e.touches && e.touches.length===2 && startDist){ const d = Math.hypot(e.touches[0].clientX-e.touches[1].clientX, e.touches[0].clientY-e.touches[1].clientY); const factor = d / startDist; const s = Math.min(2, Math.max(0.6, scale * factor)); area.style.transform = `scale(${s})`; } }, {passive:true}); area.addEventListener('touchend', (e)=>{ if(startDist){ const transform = area.style.transform; const m = /scale\\(([^)]+)\\)/.exec(transform); if(m && m[1]) scale = parseFloat(m[1]); startDist = null; } }, {passive:true}); }

// initial
save();
